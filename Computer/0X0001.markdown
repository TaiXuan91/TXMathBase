# C初学指南

这里所探讨的 C是一门编程语言，也就是the C programming language。C是目前计算机工程领域最为基础的语言之一。它的基础性地位主要来自于语言的设计和现存项目两方面。设计上它相对接近计算机架构的底层同时又提供了一定的抽象能力，让使用者在获取尽量底层的控制能力的同时可以使用相对简洁的代码；现存项目方面，用这种语言编写的工程项目几乎遍及计算机工程的各个领域，其中最为重要的是目前主要的操作系统和许多“高级语言”的运行时环境程序就是由这种语言编写的。因此，虽然这种语言现在存在包管理不完善、项目构建不方便、语言设计老旧等问题，计算机工程在可预见的未来却不会抛弃这门语言，而会以改进、更新、整合以及继续使用为主。

由于C在计算机工程中事实上的基础性设施地位，不论在开发中是否直接用到大量的C，都应当对这门语言及其相关知识有所了解。

但是，**我个人并不推荐用C作为入门计算机时学习的第一语言**。C是基础的，但这不意味着它是简单的，也不意味着它是易学的，在工程中作为基石和在学习中作为第一课是两码事。那么为什么我还要把C放到这个系列中这么靠前的部分呢？因为我写这个系列的时候已经不是入门阶段的初学者了，所以尽量按照知识结构和工程逻辑排布内容，而不是按照学习顺序排列。初学者如果想在这个系列中找到更多适合自己的内容不妨往后翻几章。

## 学什么

个人认为对于不需要大量写C代码的人来说，了解C的主要目的是阅读C代码和编译由C写的项目，基于此，所需要掌握的主要内容如下：

- C语言标准和标准库（包括宏和头文件写法）
- 标准库的实现和编译工具链
- 项目源码组织方式和基本构建工具

通常来说，作为标准的纯C高度绑定于类Unix系统以及GNU工具链；而其他系统都有替代C的主要编程语言（例如Windows有Visual C++，Mac有Objective-C）；虽然很多嵌入式编程会用到C但往往也对C的语法和标准库做了不小的改动，基于这些原因，上边列举的内容将主要在Linux和GNU的基础上学习。

## 不学什么

目前LLVM是一个相当有竞争力的、在多种意义上跨平台的、支持C语言的工具链和运行环境。在很多方面LLVM都可以与GNU的工具链竞争，有的方面LLVM甚至走的更远。但由于LLVM并非一个仅仅关注C语言（乃至并非仅仅关注C语系）的项目，这里不将LLVM作为C语言知识的一部分。

最初的C++作为C的超集提出，几乎所有的C程序也都是C++的程序。但目前C++已经不堪重负，维持与C的一致性也不再是C和C++标准委员会的主要目标。因此虽然很多C项目也可以使用C++的工具链处理，这里仍然不推荐这种做法，因此不将利用C++工具链的知识作为C语言相关的知识介绍。

## 拓展什么

仅仅凭借C语言的基本功能和标准库是难以应对各种编程需求的，因此在了解基本的C知识后根据需要了解一些相关的非标注库和框架很有必要。C语言与类Unix系统高度绑定，甚至一些程序构建和调用也和类Unix系统的接口有关，在了解C之后首先应当对类Unix的开发做一个大致的了解。如果你在C以外还使用其他编程语言，那么了解这些编程语言和C的交互方式，熟悉一下它们和C的混合编程也是很有意义的。具体到一定的业务场景中，可以按需了解相关的专用库，例如编写GUI程序就看看GTK、做压缩就看看zlib、做数值计算就看看GNU Scientific Library (GSL)等等。

如果你对C的需求超出了阅读和编译，需要大量编写C代码，那么你还应当对开发工具有所了解，例如常用的调试工具GDB。同时，代码风格也是一个应当注意的点，好的代码风格会大大降低代码的维护难度，同时减少出错。但代码风格并不像语言标准那样具有普适性（尤其是对于涉及范围如此广泛的C来说），建议阅读一些优质项目的代码风格指南。

